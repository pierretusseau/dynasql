{"version":3,"sources":["components/QueryForm.js","App.js","serviceWorker.js","index.js"],"names":["QueryForm","useState","Key","setKey","Base","setBase","Target","setTarget","Guid","setGuid","getOnlyDomain","string","split","textAreaValue","base","target","guid","withProtocol","firstLine","secondLine","thirdLine","fourthLine","className","type","placeholder","value","onChange","event","name","checked","rows","cols","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAGe,SAASA,IAAa,IAAD,EACVC,mBAAS,OADC,mBACzBC,EADyB,KACpBC,EADoB,OAERF,mBAAS,6BAFD,mBAEzBG,EAFyB,KAEnBC,EAFmB,OAGJJ,mBAAS,6BAHL,mBAGzBK,EAHyB,KAGjBC,EAHiB,OAIRN,oBAAS,GAJD,mBAIzBO,EAJyB,KAInBC,EAJmB,KAkB1BC,EAAgB,SAAAC,GAElB,OADYA,EAAOC,MAAM,OACd,IAGTC,EAAgB,SAACC,EAAMC,GAA+C,IAAvCC,EAAsC,wDAAxBC,IAAwB,yDACjEC,EAAS,iBAAahB,EAAb,6DAAqEe,EAAeH,EAAOJ,EAAcI,GAAzG,eAAqHG,EAAeF,EAASL,EAAcK,GAA3J,+DACTI,EAAaH,EAAI,iBAAad,EAAb,2CAAmDe,EAAeH,EAAOJ,EAAcI,GAAvF,eAAmGG,EAAeF,EAASL,EAAcK,GAAzI,SAA0J,GAC3KK,EAAS,iBAAalB,EAAb,2DAAmEe,EAAeH,EAAOJ,EAAcI,GAAvG,eAAmHG,EAAeF,EAASL,EAAcK,GAAzJ,SACTM,EAAU,iBAAanB,EAAb,0DAAkEe,EAAeH,EAAOJ,EAAcI,GAAtG,cAAiHG,EAAeF,EAASL,EAAcK,GAAvJ,SAChB,OAAOG,EAAYC,EAAaC,EAAYC,GAGhD,OACI,oCACI,yBAAKC,UAAU,WACX,2BAAOC,KAAK,OAAOC,YAAY,UAAOC,MAAOvB,EAAKwB,SA5B5C,SAAAC,GACdxB,EAAOwB,EAAMZ,OAAOU,UA4BZ,2BAAOF,KAAK,OAAOC,YAAY,kBAAkBC,MAAOrB,EAAMsB,SA1BvD,SAAAC,GACftB,EAAQsB,EAAMZ,OAAOU,UA0Bb,2BAAOF,KAAK,OAAOC,YAAY,gBAAgBC,MAAOnB,EAAQoB,SAxBrD,SAAAC,GACjBpB,EAAUoB,EAAMZ,OAAOU,UAwBf,wCAEI,2BAAOF,KAAK,WAAWK,KAAK,OAAOC,QAASrB,EAAO,UAAY,GAAIkB,SAxBhE,SAAAC,GACflB,EAAQkB,EAAMZ,OAAOc,cA0BjB,8BAAUC,KAAK,IAAIC,KAAK,MAAMN,MAAOZ,EAAcT,EAAME,EAAQE,KACjE,8BAAUsB,KAAK,IAAIC,KAAK,MAAMN,MAAOZ,EAAcT,EAAME,EAAQE,GAAM,MC9BpEwB,MAXf,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAAC,EAAD,SCEYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6580b920.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './QueryForm.css'\n\nexport default function QueryForm() {\n    const [Key, setKey] = useState('wp_')\n    const [Base, setBase] = useState('http://www.old-domain.com')\n    const [Target, setTarget] = useState('http://www.new-domain.com')\n    const [Guid, setGuid] = useState(false)\n\n    const handleKey = event => {\n        setKey(event.target.value);\n    }\n    const handleBase = event => {\n        setBase(event.target.value);\n    }\n    const handleTarget = event => {\n        setTarget(event.target.value);\n    }\n    const handleGuid = event => {\n        setGuid(event.target.checked);\n    }\n    const getOnlyDomain = string => {\n        const str = string.split('://')\n        return str[1]\n    }\n\n    const textAreaValue = (base, target, guid = false, withProtocol = true) => {\n        const firstLine = `UPDATE ${Key}options SET option_value = replace(option_value, '${withProtocol ? base : getOnlyDomain(base)}', '${withProtocol ? target : getOnlyDomain(target)}') WHERE option_name = 'home' OR option_name = 'siteurl';\\n`\n        const secondLine = guid ? `UPDATE ${Key}posts SET guid = replace(guid, '${withProtocol ? base : getOnlyDomain(base)}', '${withProtocol ? target : getOnlyDomain(target)}');\\n` : ''\n        const thirdLine = `UPDATE ${Key}posts SET post_content = replace(post_content, '${withProtocol ? base : getOnlyDomain(base)}', '${withProtocol ? target : getOnlyDomain(target)}');\\n`\n        const fourthLine = `UPDATE ${Key}postmeta SET meta_value = replace(meta_value, '${withProtocol ? base : getOnlyDomain(base)}','${withProtocol ? target : getOnlyDomain(target)}');\\n`\n        return firstLine + secondLine + thirdLine + fourthLine\n    }\n\n    return (\n        <>\n            <div className=\"options\">\n                <input type=\"text\" placeholder=\"ClÃ©e\" value={Key} onChange={handleKey}/>\n                <input type=\"text\" placeholder=\"Domaine de base\" value={Base} onChange={handleBase}/>\n                <input type=\"text\" placeholder=\"Domaine cible\" value={Target} onChange={handleTarget}/>\n                <label>\n                    GUID ?\n                    <input type=\"checkbox\" name=\"guid\" checked={Guid ? 'checked' : ''} onChange={handleGuid}/>\n                </label>\n            </div>\n            <textarea rows=\"7\" cols=\"100\" value={textAreaValue(Base, Target, Guid)}></textarea>\n            <textarea rows=\"7\" cols=\"100\" value={textAreaValue(Base, Target, Guid, false)}></textarea>\n        </>\n    )\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Queryform from './components/QueryForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <Queryform />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}